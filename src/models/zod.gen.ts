// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod/v3";

/**
 * The type of discount. Possible values are `NONE`, `FULL`, `SPLIT`, `PRORATED` or `MANUAL`
 */
export const zAdjustmentDiscount = z.enum([
  "NONE",
  "FULL",
  "SPLIT",
  "PRORATED",
  "MANUAL",
]);

/**
 * The type of adjustment. Possible values are `BOOKING`, `UNIT` or `PERCENTAGE`
 */
export const zAdjustmentPer = z.enum(["BOOKING", "UNIT", "PERCENTAGE"]);

export const zAgent = z.object({
  id: z.string().uuid(),
  name: z.string(),
  reference: z.union([z.string(), z.null()]),
  tags: z.array(z.string()),
});

export const zAvailabilityStatus = z.enum([
  "AVAILABLE",
  "FREESALE",
  "SOLD_OUT",
  "LIMITED",
  "CLOSED",
]);

/**
 * Defines the opening hours for this availability, even for start time-based availability. Supports multiple periods for breaks in the day.
 */
export const zOpeningHours = z.object({
  from: z.string(),
  to: z.string(),
  frequency: z.string().optional(),
  frequencyAmount: z.number().int().optional(),
  frequencyUnit: z.string().optional(),
});

export const zPickupPoint = z.object({
  id: z.string().uuid(),
  name: z.string(),
  directions: z.union([z.string(), z.null()]),
  address: z.union([z.string(), z.null()]),
  latitude: z.union([z.number(), z.null()]),
  longitude: z.union([z.number(), z.null()]),
  localDateTime: z.union([z.string(), z.null()]),
  localDateTimeTo: z.union([z.string(), z.null()]),
  googlePlaceId: z.union([z.string(), z.null()]),
  street: z.union([z.string(), z.null()]),
  postalCode: z.union([z.string(), z.null()]),
  locality: z.union([z.string(), z.null()]),
  region: z.union([z.string(), z.null()]),
  state: z.union([z.string(), z.null()]),
  country: z.union([z.string(), z.null()]),
});

export const zTax = z.object({
  name: z.string(),
  retail: z.number().int(),
  original: z.number().int(),
  net: z.union([z.number().int(), z.null()]),
  shortDescription: z.union([z.string(), z.null()]),
});

export const zOfferDiscount = z.object({
  net: z.number(),
  retail: z.number(),
  includedTaxes: z.array(zTax),
});

export const zPricing = z.object({
  original: z.number().int(),
  retail: z.number().int(),
  net: z.union([z.number().int(), z.null()]),
  currency: z.string(),
  currencyPrecision: z.number().int(),
  includedTaxes: z.array(zTax),
  offerDiscount: z.union([zOfferDiscount, z.null()]).optional(),
  extraId: z.array(z.string()).optional(),
});

export const zPricingUnit = z.object({
  original: z.number().int(),
  retail: z.number().int(),
  net: z.union([z.number().int(), z.null()]),
  currency: z.string(),
  currencyPrecision: z.number().int(),
  includedTaxes: z.array(zTax),
  unitId: z.string(),
  extraPricing: z.array(zPricing).optional(),
});

export const zNetDiscount = z.enum(["NONE", "FULL", "SPLIT", "PRORATED"]);

export const zOfferRestrictions = z.object({
  minUnits: z.union([z.number().int(), z.null()]),
  maxUnits: z.union([z.number().int(), z.null()]),
  minTotal: z.union([z.number(), z.null()]),
  maxTotal: z.union([z.number(), z.null()]),
  unitIds: z.array(z.string()),
});

export const zOffer = z.object({
  title: z.string(),
  code: z.string(),
  description: z.union([z.string(), z.null()]),
  netDiscount: z.union([zNetDiscount, z.null()]),
  restrictions: zOfferRestrictions,
  usable: z.boolean(),
});

export const zTourGroup = z.object({
  id: z.string().uuid(),
  internalName: z.string(),
  title: z.string(),
});

export const zNotice = z.object({
  id: z.string().uuid(),
  title: z.union([z.string(), z.null()]),
  shortDescription: z.string(),
  coverImageUrl: z.union([z.string(), z.null()]),
});

export const zAvailability = z.object({
  id: z.string(),
  localDateTimeStart: z.string(),
  localDateTimeEnd: z.string(),
  utcCutoffAt: z.string().datetime(),
  allDay: z.boolean(),
  available: z.boolean(),
  status: zAvailabilityStatus,
  vacancies: z.union([z.number().int(), z.null()]),
  capacity: z.union([z.number().int(), z.null()]),
  maxUnits: z.union([z.number().int(), z.null()]),
  openingHours: z.array(zOpeningHours),
  totalCapacity: z.union([z.number().int(), z.null()]),
  limitCapacity: z.union([z.number().int(), z.null()]),
  limitPaxCount: z.number().int(),
  noShows: z.number().int(),
  totalNoShows: z.number().int(),
  totalPaxCount: z.number().int(),
  paxCount: z.number().int(),
  maxPaxCount: z.union([z.number().int(), z.null()]),
  pickupAvailable: z.boolean().optional(),
  pickupRequired: z.boolean().optional(),
  pickupPoints: z.array(zPickupPoint).optional(),
  unitPricing: z.array(zPricingUnit).optional(),
  pricing: z.array(zPricing).optional(),
  offerCode: z.union([z.string(), z.null()]).optional(),
  offerTitle: z.union([z.string(), z.null()]).optional(),
  offers: z.array(zOffer).optional(),
  offer: z.union([zOffer, z.null()]).optional(),
  meetingPoint: z.string().optional(),
  meetingPointCoordinates: z.array(z.number()).optional(),
  meetingPointLatitude: z.number().optional(),
  meetingPointLongitude: z.number().optional(),
  meetingLocalDateTime: z.string().datetime().optional(),
  tourGroup: zTourGroup.optional(),
  notices: z.array(zNotice).optional(),
});

export const zUnitType = z.enum([
  "ADULT",
  "YOUTH",
  "CHILD",
  "INFANT",
  "FAMILY",
  "SENIOR",
  "STUDENT",
  "MILITARY",
  "OTHER",
]);

export const zAvailabilityUnit = z.object({
  id: z.string().optional(),
  type: zUnitType.optional(),
  quantity: z.number().int(),
});

export const zAvailabilityCalendarBody = z.object({
  productId: z.string(),
  optionId: z.string(),
  localDateStart: z.string().optional(),
  localDateEnd: z.string().optional(),
  units: z.array(zAvailabilityUnit).optional(),
  currency: z.string().optional(),
});

export const zOctoBaseError = z.object({
  error: z.string(),
  errorMessage: z.string(),
});

export const zOctoErrorInvalidProductId = zOctoBaseError.and(
  z.object({
    productId: z.string(),
  }),
);

export const zOctoErrorInvalidOptionId = zOctoBaseError.and(
  z.object({
    optionId: z.string(),
  }),
);

export const zOctoErrorBadRequest = zOctoBaseError;

export const zOctoErrorUnauthorized = zOctoBaseError;

export const zOctoErrorInternalServerError = zOctoBaseError;

export const zOctoErrorForbidden = zOctoBaseError;

export const zOctoAvailabilityCalendarErrorResponse = z.object({
  body: z.union([
    zOctoErrorInvalidProductId,
    zOctoErrorInvalidOptionId,
    zOctoErrorBadRequest,
    zOctoErrorUnauthorized,
    zOctoErrorInternalServerError,
    zOctoErrorForbidden,
  ]),
});

export const zAvailabilityCalendarErrorResponse =
  zOctoAvailabilityCalendarErrorResponse;

export const zAvailabilityCalendarRequest = z.object({
  body: zAvailabilityCalendarBody,
});

export const zAvailabilityCheckBody = z.object({
  productId: z.string(),
  optionId: z.string(),
  localDateStart: z.string().optional(),
  localDateEnd: z.string().optional(),
  availabilityIds: z.array(z.string()).optional(),
  units: z.array(zAvailabilityUnit).optional(),
  currency: z.string().optional(),
});

export const zOctoAvailabilityCheckErrorResponse = z.object({
  body: z.union([
    zOctoErrorInvalidProductId,
    zOctoErrorInvalidOptionId,
    zOctoErrorBadRequest,
    zOctoErrorUnauthorized,
    zOctoErrorInternalServerError,
    zOctoErrorForbidden,
  ]),
});

export const zAvailabilityCheckErrorResponse =
  zOctoAvailabilityCheckErrorResponse;

export const zAvailabilityCheckRequest = z.object({
  body: zAvailabilityCheckBody,
});

export const zAvailabilityContent = z.object({
  meetingPoint: z.string().optional(),
  meetingPointCoordinates: z.array(z.number()).optional(),
  meetingPointLatitude: z.number().optional(),
  meetingPointLongitude: z.number().optional(),
  meetingLocalDateTime: z.string().datetime().optional(),
  tourGroup: zTourGroup.optional(),
  notices: z.array(zNotice).optional(),
});

export const zAvailabilityOffers = z.object({
  offerCode: z.union([z.string(), z.null()]).optional(),
  offerTitle: z.union([z.string(), z.null()]).optional(),
  offers: z.array(zOffer).optional(),
  offer: z.union([zOffer, z.null()]).optional(),
});

export const zAvailabilityPickups = z.object({
  pickupAvailable: z.boolean().optional(),
  pickupRequired: z.boolean().optional(),
  pickupPoints: z.array(zPickupPoint).optional(),
});

export const zAvailabilityPricing = z.object({
  unitPricing: z.array(zPricingUnit).optional(),
  pricing: z.array(zPricing).optional(),
});

export const zAvailabilityType = z.enum(["START_TIME", "OPENING_HOURS"]);

export const zBookingStatus = z.enum([
  "ON_HOLD",
  "CONFIRMED",
  "EXPIRED",
  "CANCELLED",
  "REDEEMED",
  "PENDING",
  "REJECTED",
  "NOSHOW",
  "UPGRADED",
]);

export const zDeliveryFormat = z.enum([
  "PDF_URL",
  "QRCODE",
  "CODE128",
  "PKPASS_URL",
]);

export const zDeliveryMethod = z.enum(["VOUCHER", "TICKET"]);

export const zRedemptionMethod = z.enum(["DIGITAL", "PRINT", "MANIFEST"]);

export const zSettlementMethod = z.enum([
  "deferred",
  "deposit",
  "direct",
  "voucher",
  "wholesale",
]);

export const zDurationUnit = z.enum(["minute", "hour", "day"]);

export const zCancellationCutoffUnit = z.enum(["hour", "minute", "day"]);

export const zContactField = z.enum([
  "firstName",
  "lastName",
  "emailAddress",
  "phoneNumber",
  "country",
  "notes",
  "locales",
  "allowMarketing",
  "postalCode",
]);

export const zOptionRestrictions = z.object({
  minUnits: z.union([z.number().int(), z.null()]),
  maxUnits: z.union([z.number().int(), z.null()]),
  minPaxCount: z.union([z.number().int(), z.null()]),
  maxPaxCount: z.union([z.number().int(), z.null()]),
});

export const zUnitRestrictions = z.object({
  minAge: z.number().int(),
  maxAge: z.number().int(),
  idRequired: z.boolean(),
  minQuantity: z.union([z.number().int(), z.null()]),
  maxQuantity: z.union([z.number().int(), z.null()]),
  paxCount: z.number().int(),
  accompaniedBy: z.array(z.string()),
  minHeight: z.number().int().optional(),
  maxHeight: z.number().int().optional(),
  heightUnit: z.string().optional(),
  minWeight: z.number().int().optional(),
  maxWeight: z.number().int().optional(),
  weightUnit: z.string().optional(),
  required: z.boolean(),
  accompaniedByRatio: z.union([z.number().int(), z.null()]),
});

export const zQuestionInputType = z.enum(["radio", "select", "textArea"]);

export const zSelectOption = z.object({
  label: z.string(),
  value: z.string(),
});

export const zQuestion = z.object({
  id: z.string().uuid(),
  label: z.union([z.string(), z.null()]),
  hint: z.union([z.string(), z.null()]),
  maxLength: z.union([z.number().int(), z.null()]),
  inputType: zQuestionInputType,
  required: z.boolean(),
  selectOptions: z.array(zSelectOption),
  coverImageUrl: z.union([z.string(), z.null()]),
  description: z.union([z.string(), z.null()]),
  shortDescription: z.union([z.string(), z.null()]),
  internalName: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
});

export const zExtraRestrictions = z.object({
  default: z.boolean(),
  required: z.boolean(),
  minQuantity: z.number().int(),
  maxQuantity: z.union([z.number().int(), z.null()]),
});

export const zExtra = z.object({
  id: z.string(),
  internalName: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
  description: z.union([z.string(), z.null()]),
  reference: z.union([z.string(), z.null()]),
  restrictions: zExtraRestrictions,
  pricingFrom: z.array(zPricing).optional(),
  pricing: z.array(zPricing).optional(),
  shortDescription: z.union([z.string(), z.null()]),
});

export const zUnit = z.object({
  id: z.string(),
  internalName: z.string(),
  reference: z.union([z.string(), z.null()]),
  type: zUnitType,
  requiredContactFields: z.array(zContactField),
  tags: z.array(z.string()),
  visibleContactFields: z.array(zContactField),
  restrictions: zUnitRestrictions,
  title: z.string().optional(),
  titlePlural: z.string().optional(),
  subtitle: z.union([z.string(), z.null()]).optional(),
  pricingFrom: z.array(zPricing).optional(),
  pricing: z.array(zPricing).optional(),
  questions: z.array(zQuestion).optional(),
  extras: z.array(zExtra).optional(),
});

export const zItineraryItemType = z.enum(["START", "POI", "END", "EVENT"]);

export const zItineraryItem = z.object({
  name: z.string(),
  type: zItineraryItemType,
  description: z.union([z.string(), z.null()]),
  address: z.union([z.string(), z.null()]),
  googlePlaceId: z.union([z.string(), z.null()]),
  latitude: z.union([z.number(), z.null()]),
  longitude: z.union([z.number(), z.null()]),
  travelTime: z.union([z.string(), z.null()]),
  travelTimeAmount: z.union([z.number(), z.null()]),
  travelTimeUnit: z.union([zDurationUnit, z.null()]),
  duration: z.union([z.string(), z.null()]),
  durationAmount: z.number(),
  durationUnit: zDurationUnit,
});

export const zPointGroup = z.object({
  id: z.string(),
  internalName: z.string(),
  title: z.string(),
  shortDescription: z.string(),
});

export const zPoint = z.object({
  id: z.string(),
  internalName: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
  shortDescription: z.union([z.string(), z.null()]),
  pointGroup: zPointGroup,
});

export const zOctoTax = z.object({
  name: z.string(),
  retail: z.number().int(),
  original: z.number().int(),
  net: z.union([z.number().int(), z.null()]),
});

export const zOctoPricing = z.object({
  original: z.number().int(),
  retail: z.number().int(),
  net: z.union([z.number().int(), z.null()]),
  currency: z.string(),
  currencyPrecision: z.number().int(),
  includedTaxes: z.array(zOctoTax),
});

/**
 * The defaultable ID is a string that can be used to identify a defaultable object.
 * It is either a UUID in which case the object is uniquely identified (not defaulted) or
 * it is the string `DEFAULT` in which case the object is defaulted.
 */
export const zDefaultableId: z.ZodTypeAny = z.string();

export const zInclude: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  required: z.boolean(),
  limit: z.number().int(),
  validityDays: z.number().int().optional(),
  productId: z.string().uuid(),
  product: z.union([
    z.lazy(() => {
      return zProduct;
    }),
    z.null(),
  ]),
  optionId: zDefaultableId,
  option: z.union([
    z.lazy(() => {
      return zOption;
    }),
    z.null(),
  ]),
});

export const zPackageInclude: z.AnyZodObject = z.object({
  title: z.string().optional(),
  count: z.number().int(),
  includes: z.array(zInclude),
});

export const zOption: z.AnyZodObject = z.object({
  id: z.string(),
  default: z.boolean(),
  internalName: z.string(),
  reference: z.union([z.string(), z.null()]),
  availabilityLocalStartTimes: z.array(z.string()).min(1),
  cancellationCutoff: z.string(),
  cancellationCutoffAmount: z.number().int(),
  cancellationCutoffUnit: zCancellationCutoffUnit,
  requiredContactFields: z.array(zContactField),
  availabilityCutoff: z.string(),
  availabilityCutoffAmount: z.number().int(),
  availabilityCutoffUnit: zDurationUnit,
  tags: z.array(z.string()),
  visibleContactFields: z.array(zContactField),
  restrictions: zOptionRestrictions,
  units: z.array(zUnit),
  title: z.string().optional(),
  subtitle: z.union([z.string(), z.null()]).optional(),
  language: z.string().optional(),
  shortDescription: z.union([z.string(), z.null()]).optional(),
  duration: z.string().optional(),
  durationAmount: z.number().optional(),
  durationUnit: zDurationUnit.optional(),
  coverImageUrl: z.union([z.string().url(), z.null()]).optional(),
  itinerary: z.union([z.array(zItineraryItem), z.null()]).optional(),
  fromPoint: z.union([zPoint, z.null()]).optional(),
  toPoint: z.union([zPoint, z.null()]).optional(),
  pickupAvailable: z.boolean().optional(),
  pickupRequired: z.boolean().optional(),
  pickupPoints: z.array(zPickupPoint).optional(),
  pricingFrom: z.array(zOctoPricing).optional(),
  pricing: z.array(zOctoPricing).optional(),
  questions: z.array(zQuestion).optional(),
  extras: z.array(zExtra).optional(),
  packageIncludes: z.array(zPackageInclude).optional(),
});

/**
 * Contact information.
 */
export const zDestinationContact: z.AnyZodObject = z.object({
  name: z.union([z.string(), z.null()]),
  email: z.union([z.string(), z.null()]),
  telephone: z.union([z.string(), z.null()]),
  address: z.union([z.string(), z.null()]),
  website: z.union([z.string(), z.null()]),
});

export const zCategory: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  default: z.boolean(),
  name: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
  tags: z.array(z.string()),
  shortDescription: z.union([z.string(), z.null()]),
  coverImageUrl: z.union([z.string().url(), z.null()]),
  bannerImageUrl: z.union([z.string().url(), z.null()]),
  productIds: z.array(z.string()),
});

export const zDestination: z.AnyZodObject = z.object({
  id: z.string(),
  default: z.boolean(),
  name: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
  shortDescription: z.union([z.string(), z.null()]),
  featured: z.boolean(),
  country: z.union([z.string(), z.null()]),
  contact: zDestinationContact,
  latitude: z.union([z.number(), z.null()]),
  longitude: z.union([z.number(), z.null()]),
  googlePlaceId: z.union([z.string(), z.null()]),
  bannerImageUrl: z.union([z.string().url(), z.null()]),
  coverImageUrl: z.union([z.string().url(), z.null()]),
  videoUrl: z.union([z.string().url(), z.null()]),
  facebookUrl: z.union([z.string().url(), z.null()]),
  googleUrl: z.union([z.string().url(), z.null()]),
  tripadvisorUrl: z.union([z.string().url(), z.null()]),
  twitterUrl: z.union([z.string().url(), z.null()]),
  youtubeUrl: z.union([z.string().url(), z.null()]),
  instagramUrl: z.union([z.string().url(), z.null()]),
  categories: z.array(zCategory),
  tags: z.array(z.string()),
  address: z.union([z.string(), z.null()]),
  notices: z.array(zNotice),
});

export const zFaq: z.AnyZodObject = z.object({
  question: z.string(),
  answer: z.string(),
});

export const zImage: z.AnyZodObject = z.object({
  url: z.string().url(),
  title: z.union([z.string(), z.null()]),
  caption: z.union([z.string(), z.null()]),
});

export const zBrandContact: z.AnyZodObject = z.object({
  name: z.union([z.string(), z.null()]),
  email: z.union([z.string(), z.null()]),
  telephone: z.union([z.string(), z.null()]),
  address: z.union([z.string(), z.null()]),
  website: z.union([z.string(), z.null()]),
});

export const zFont: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  name: z.union([z.string(), z.null()]),
  normalTtfUrl: z.union([z.string(), z.null()]),
  italicTtfUrl: z.union([z.string(), z.null()]),
  boldTtfUrl: z.union([z.string(), z.null()]),
  boldItalicTtfUrl: z.union([z.string(), z.null()]),
});

export const zBrand: z.AnyZodObject = z.object({
  id: z.union([z.string(), z.null()]),
  name: z.union([z.string(), z.null()]),
  contact: z.union([zBrandContact, z.null()]),
  color: z.union([z.string(), z.null()]),
  secondaryColor: z.union([z.string(), z.null()]),
  backgroundColor: z.union([z.string(), z.null()]),
  accentFont: z.union([zFont, z.null()]),
  bodyFont: z.union([zFont, z.null()]),
  headerFont: z.union([zFont, z.null()]),
  checkoutLogoUrl: z.union([z.string(), z.null()]),
  logoUrl: z.union([z.string(), z.null()]),
  logoWhiteUrl: z.union([z.string(), z.null()]),
  faviconUrl: z.union([z.string(), z.null()]),
});

export const zPricingPer: z.ZodTypeAny = z.enum(["BOOKING", "UNIT"]);

export const zGoogleLocalizedText: z.AnyZodObject = z.object({
  text: z.string(),
  language_code: z.string(),
});

export const zGoogleLocation: z.AnyZodObject = z.object({
  location: z.object({
    place_id: z.string(),
  }),
});

export const zGoogleOperator: z.AnyZodObject = z.object({
  name: z.string(),
  google_business_profile_name: z.object({
    localized_texts: z.array(zGoogleLocalizedText),
  }),
  phone_number: z.string(),
  locations: z.array(zGoogleLocation),
});

export const zGoogleRating: z.AnyZodObject = z.object({
  average_value: z.union([z.number(), z.null()]),
  rating_count: z.union([z.number().int(), z.null()]),
});

export const zGoogleUrl: z.AnyZodObject = z.object({
  url: z.union([z.string(), z.null()]),
});

export const zGoogleOptionCategory: z.AnyZodObject = z.object({
  label: z.string(),
});

export const zGoogleRelatedLocation: z.AnyZodObject = z.object({
  location: z.object({
    location: z.object({
      place_id: z.string(),
    }),
  }),
  relation_type: z.string(),
});

export const zGoogleOptions: z.AnyZodObject = z.object({
  operator: z.union([zGoogleOperator, z.null()]),
  rating: z.union([zGoogleRating, z.null()]),
  landing_page: zGoogleUrl,
  inventory_type: z.string(),
  landing_page_list_view: zGoogleUrl,
  option_categories: z.array(zGoogleOptionCategory),
  related_locations: z.array(zGoogleRelatedLocation),
});

export const zProduct: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  internalName: z.string(),
  reference: z.union([z.string(), z.null()]),
  locale: z.string(),
  timeZone: z.string(),
  allowFreesale: z.boolean(),
  instantConfirmation: z.boolean(),
  instantDelivery: z.boolean(),
  availabilityRequired: z.boolean(),
  availabilityType: zAvailabilityType,
  deliveryFormats: z.array(zDeliveryFormat),
  deliveryMethods: z.array(zDeliveryMethod),
  redemptionMethod: zRedemptionMethod,
  tags: z.array(z.string()),
  settlementMethods: z.array(zSettlementMethod),
  freesaleDurationAmount: z.number().int(),
  freesaleDurationUnit: zDurationUnit,
  options: z.array(zOption),
  country: z.string().optional(),
  location: z.string().optional(),
  destination: zDestination.optional(),
  alert: z.string().optional(),
  title: z.string().optional(),
  subtitle: z.string().optional(),
  description: z.string().optional(),
  shortDescription: z.string().optional(),
  categories: z.array(zCategory).optional(),
  inclusions: z.array(z.string()).optional(),
  exclusions: z.array(z.string()).optional(),
  highlights: z.array(z.string()).optional(),
  pointToPoint: z.boolean().optional(),
  bookingTerms: z.string().optional(),
  privacyTerms: z.string().optional(),
  redemptionInstructions: z.string().optional(),
  cancellationPolicy: z.string().optional(),
  faqs: z.array(zFaq).optional(),
  coverImageUrl: z.string().url().optional(),
  bannerImageUrl: z.string().url().optional(),
  videoUrl: z.string().url().optional(),
  galleryImages: z.array(zImage).optional(),
  bannerImages: z.array(zImage).optional(),
  googlePlaceId: z.string().optional(),
  address: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  tagline: z.string().optional(),
  brand: zBrand.optional(),
  defaultCurrency: z.string().optional(),
  availableCurrencies: z.array(z.string()).optional(),
  pricingPer: zPricingPer.optional(),
  includeTax: z.boolean().optional(),
  isPackage: z.boolean().optional(),
  packageBookingAvailabilityRequired: z.boolean().optional(),
  googleOptions: z.array(zGoogleOptions).optional(),
});

export const zRefund: z.ZodTypeAny = z.enum(["FULL", "PARTIAL", "NONE"]);

export const zBookingCancellation: z.AnyZodObject = z.object({
  refund: zRefund,
  reason: z.union([z.string(), z.null()]),
  utcCancelledAt: z.string().datetime(),
});

export const zCustomerContact: z.AnyZodObject = z.object({
  fullName: z.union([z.string(), z.null()]),
  firstName: z.union([z.string(), z.null()]),
  lastName: z.union([z.string(), z.null()]),
  emailAddress: z.union([z.string().email(), z.null()]),
  phoneNumber: z.union([z.string(), z.null()]),
  locales: z.union([z.array(z.string()), z.null()]),
  postalCode: z.union([z.string(), z.null()]),
  country: z.union([z.string(), z.null()]),
  notes: z.union([z.string(), z.null()]),
  taxId: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
  streetAddress: z.union([z.string(), z.null()]),
  city: z.union([z.string(), z.null()]),
  state: z.union([z.string(), z.null()]),
  allowMarketing: z.boolean(),
});

export const zDeliveryOption: z.AnyZodObject = z.object({
  deliveryFormat: zDeliveryFormat,
  deliveryValue: z.string(),
});

export const zTicket: z.AnyZodObject = z.object({
  redemptionMethod: zRedemptionMethod,
  utcRedeemedAt: z.union([z.string(), z.null()]),
  deliveryOptions: z.array(zDeliveryOption),
  utcNoshowedAt: z.union([z.string(), z.null()]),
});

export const zQuestionAnswer: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  label: z.union([z.string(), z.null()]),
  hint: z.union([z.string(), z.null()]),
  maxLength: z.union([z.number().int(), z.null()]),
  inputType: zQuestionInputType,
  required: z.boolean(),
  selectOptions: z.array(zSelectOption),
  coverImageUrl: z.union([z.string(), z.null()]),
  description: z.union([z.string(), z.null()]),
  shortDescription: z.union([z.string(), z.null()]),
  internalName: z.union([z.string(), z.null()]),
  title: z.union([z.string(), z.null()]),
  questionId: z.string().uuid(),
  value: z.string().optional(),
});

export const zUnitItem: z.AnyZodObject = z.object({
  uuid: z.string().uuid().optional(),
  resellerReference: z.union([z.string(), z.null()]),
  supplierReference: z.union([z.string(), z.null()]),
  unitId: z.string(),
  unit: zUnit.optional(),
  status: zBookingStatus,
  utcRedeemedAt: z.union([z.string().datetime(), z.null()]),
  contact: zCustomerContact.optional(),
  ticket: z.union([zTicket, z.null()]),
  id: z.string().uuid().optional(),
  alias: z.union([z.string(), z.null()]),
  rebookingUuid: z.union([z.string().uuid(), z.null()]),
  rebookingUnitItemUuid: z.union([z.string().uuid(), z.null()]),
  originalRebookingUuid: z.union([z.string().uuid(), z.null()]),
  originalRebookingUnitItemUuid: z.union([z.string().uuid(), z.null()]),
  utcRebookedAt: z.union([z.string().datetime(), z.null()]),
  utcNoshowedAt: z.union([z.string().datetime(), z.null()]),
  requiredContactFields: z.array(z.string()).optional(),
  visibleContactFields: z.array(z.string()).optional(),
  unitType: zUnitType.optional(),
  pricing: zPricing.optional(),
  questionAnswers: z.array(zQuestionAnswer).optional(),
});

export const zReseller: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  name: z.string(),
  reference: z.union([z.string(), z.null()]),
  tags: z.array(z.string()),
});

export const zBookingRejection: z.AnyZodObject = z.object({
  reason: z.union([z.string(), z.null()]),
  utcRejectedAt: z.union([z.string().datetime(), z.null()]),
});

export const zUser: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  name: z.string(),
  reference: z.union([z.string(), z.null()]),
  tags: z.array(z.string()),
  emailAddress: z.string(),
  phoneNumber: z.union([z.string(), z.null()]),
});

export const zSeller: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  name: z.string(),
  reference: z.union([z.string(), z.null()]),
  tags: z.array(z.string()),
  emailAddress: z.union([z.string(), z.null()]),
  phoneNumber: z.union([z.string(), z.null()]),
});

export const zLabel: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  name: z.string(),
});

export const zOfferComparison: z.AnyZodObject = z.object({
  productId: z.string(),
  optionId: z.string(),
  pricing: zPricing,
  product: zProduct,
  shortDescription: z.string().optional(),
  units: z.array(zUnit),
});

export const zResourceGroup: z.AnyZodObject = z.object({
  id: z.string(),
  title: z.string(),
  split: z.boolean(),
});

export const zSeat: z.AnyZodObject = z.object({
  id: z.string(),
  title: z.string(),
  column: z.number().int(),
  row: z.number().int(),
});

export const zResource: z.AnyZodObject = z.object({
  id: z.string(),
  title: z.string(),
  seating: z.boolean(),
  seats: z.array(zSeat),
});

export const zResourceAllocation: z.AnyZodObject = z.object({
  id: z.string(),
  resourceGroupId: z.string(),
  resourceGroup: zResourceGroup,
  resourceId: z.string(),
  resource: zResource,
  paxCount: z.number().int(),
  seatIds: z.array(z.string()),
  seats: z.array(zSeat),
});

export const zGiftPayment: z.AnyZodObject = z.object({
  amount: z.coerce.bigint(),
  currency: z.string(),
  giftCode: z.string(),
});

export const zExtraItem: z.AnyZodObject = z.object({
  id: z.string(),
  extraId: z.string(),
  extra: zExtra,
  pricing: zPricing,
});

export const zBookingAdjustment: z.AnyZodObject = z.object({
  per: zAdjustmentPer,
  amount: z.number(),
  notes: z.union([z.string(), z.null()]),
  netDiscount: zAdjustmentDiscount,
});

export const zIdentity: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  key: z.string(),
});

export const zBooking: z.AnyZodObject = z.object({
  id: z.string().uuid(),
  uuid: z.string().uuid(),
  testMode: z.boolean(),
  resellerReference: z.union([z.string(), z.null()]),
  supplierReference: z.union([z.string(), z.null()]),
  status: zBookingStatus,
  utcCreatedAt: z.string().datetime(),
  utcUpdatedAt: z.string().datetime(),
  utcExpiresAt: z.union([z.string().datetime(), z.null()]),
  utcRedeemedAt: z.union([z.string().datetime(), z.null()]),
  utcConfirmedAt: z.union([z.string().datetime(), z.null()]),
  productId: z.string().uuid(),
  product: zProduct.optional(),
  optionId: z.string(),
  option: zOption.optional(),
  cancellable: z.boolean(),
  cancellation: z.union([zBookingCancellation, z.null()]),
  freesale: z.boolean(),
  availabilityId: z.union([z.string(), z.null()]),
  availability: z.union([zAvailability, z.null()]).optional(),
  contact: zCustomerContact.optional(),
  notes: z.union([z.string(), z.null()]),
  deliveryMethods: z.array(zDeliveryMethod),
  voucher: z.union([zTicket, z.null()]),
  unitItems: z.array(zUnitItem),
  pricing: zPricing.optional(),
  rebookingUuid: z.union([z.string().uuid(), z.null()]),
  originalRebookingUuid: z.union([z.string().uuid(), z.null()]),
  alias: z.union([z.string(), z.null()]),
  settlementMethod: zSettlementMethod,
  quote: z.boolean(),
  confirmable: z.boolean(),
  agent: z.union([zAgent, z.null()]),
  reseller: z.union([zReseller, z.null()]),
  requiredContactFields: z.array(zContactField),
  visibleContactFields: z.array(zContactField),
  rejection: z.union([zBookingRejection, z.null()]),
  utcNoshowedAt: z.union([z.string().datetime(), z.null()]),
  utcRebookedAt: z.union([z.string().datetime(), z.null()]),
  tags: z.array(z.string()).optional(),
  user: z.union([zUser, z.null()]),
  seller: z.union([zSeller, z.null()]),
  localDateTimeStart: z.string(),
  localDateTimeEnd: z.string(),
  emailReceipt: z.boolean(),
  label: z.union([zLabel, z.null()]),
  pickupRequested: z.boolean().optional(),
  pickupId: z.union([z.string().uuid(), z.null()]).optional(),
  pickupHotel: z.union([z.string(), z.null()]).optional(),
  pickupRoom: z.union([z.string(), z.null()]).optional(),
  pickupNotes: z.union([z.string(), z.null()]).optional(),
  pickupPoint: z.union([zPickupPoint, z.null()]).optional(),
  duration: z.string().optional(),
  durationAmount: z.number().optional(),
  durationUnit: zDurationUnit.optional(),
  meetingLocalDateTime: z.union([z.string(), z.null()]).optional(),
  meetingPoint: z.union([z.string(), z.null()]).optional(),
  meetingPointCoordinates: z.union([z.string(), z.null()]).optional(),
  notices: z.array(zNotice).optional(),
  termsAccepted: z.boolean().optional(),
  primary: z.boolean().optional(),
  orderId: z.string().uuid().optional(),
  orderReference: z.string().optional(),
  offerCode: z.union([z.string(), z.null()]).optional(),
  offerTitle: z.union([z.string(), z.null()]).optional(),
  offerComparisons: z.array(zOfferComparison).optional(),
  offerIsCombination: z.boolean().optional(),
  offers: z.array(zOffer).optional(),
  offer: z.union([zOffer, z.null()]).optional(),
  questionAnswers: z.array(zQuestionAnswer).optional(),
  resourceAllocations: z.array(zResourceAllocation).optional(),
  giftPayment: z.union([zGiftPayment, z.null()]).optional(),
  extraItems: z.array(zExtraItem).optional(),
  isPackage: z.boolean().optional(),
  packageIncludeId: z.string().uuid().optional(),
  packageInclude: z.union([zInclude, z.null()]).optional(),
  packageBookings: z
    .array(
      z.lazy(() => {
        return zBooking;
      }),
    )
    .optional(),
  adjustments: z.array(zBookingAdjustment).optional(),
  identity: zIdentity.optional(),
  identityId: z.string().uuid().optional(),
});

export const zBookingAdjustments = z.object({
  adjustments: z.array(zBookingAdjustment).optional(),
});

export const zOctoBookingCancellationBody = z.object({
  reason: z.string().optional(),
  force: z.boolean().optional(),
});

export const zBookingCancellationBody = zOctoBookingCancellationBody;

export const zOctoErrorInvalidBookingUuid = zOctoBaseError.and(
  z.object({
    uuid: z.string(),
  }),
);

export const zOctoErrorUnprocessableEntity = zOctoBaseError;

export const zOctoBookingCancellationErrorResponse = z.object({
  body: z.union([
    zOctoErrorInvalidBookingUuid,
    zOctoErrorUnprocessableEntity,
    zOctoErrorUnauthorized,
    zOctoErrorInternalServerError,
    zOctoErrorForbidden,
  ]),
});

export const zBookingCancellationErrorResponse =
  zOctoBookingCancellationErrorResponse;

export const zOctoBookingCancellationRequest = z.object({
  uuid: z.string(),
  body: zOctoBookingCancellationBody,
});

export const zBookingCancellationRequest = zOctoBookingCancellationRequest.and(
  z.object({
    body: zBookingCancellationBody,
  }),
);

export const zBookingCart = z.object({
  primary: z.boolean().optional(),
  orderId: z.string().uuid().optional(),
  orderReference: z.string().optional(),
});

export const zUnitItemIdentifier = z.object({
  uuid: z.string().uuid().optional(),
  unitId: z.string().optional(),
  unitType: z.string().optional(),
  resellerReference: z.string().optional(),
  alias: z.string().optional(),
});

export const zBookingContact = z.object({
  fullName: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  emailAddress: z.string().email().optional(),
  phoneNumber: z.string().optional(),
  locales: z.array(z.string()).optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
  notes: z.string().optional(),
  taxId: z.union([z.string(), z.null()]).optional(),
  streetAddress: z.union([z.string(), z.null()]).optional(),
  city: z.union([z.string(), z.null()]).optional(),
  state: z.union([z.string(), z.null()]).optional(),
  allowMarketing: z.boolean().optional(),
});

export const zBookingConfirmationBody = z.object({
  emailReceipt: z.boolean().optional(),
  resellerReference: z.string().optional(),
  unitItems: z.array(zUnitItemIdentifier),
  contact: zBookingContact,
});

export const zOctoErrorInvalidUnitId = zOctoBaseError.and(
  z.object({
    unitId: z.string(),
  }),
);

export const zOctoErrorInvalidAvailabilityId = zOctoBaseError.and(
  z.object({
    availabilityId: z.string(),
  }),
);

export const zOctoBookingConfirmationErrorResponse = z.object({
  body: z.union([
    zOctoErrorInvalidProductId,
    zOctoErrorInvalidOptionId,
    zOctoErrorInvalidUnitId,
    zOctoErrorInvalidAvailabilityId,
    zOctoErrorInvalidBookingUuid,
    zOctoErrorUnprocessableEntity,
    zOctoErrorUnauthorized,
    zOctoErrorInternalServerError,
    zOctoErrorForbidden,
  ]),
});

export const zBookingConfirmationErrorResponse =
  zOctoBookingConfirmationErrorResponse;

export const zBookingContent = z.object({
  duration: z.string().optional(),
  durationAmount: z.number().optional(),
  durationUnit: zDurationUnit.optional(),
  meetingLocalDateTime: z.union([z.string(), z.null()]).optional(),
  meetingPoint: z.union([z.string(), z.null()]).optional(),
  meetingPointCoordinates: z.union([z.string(), z.null()]).optional(),
  notices: z.array(zNotice).optional(),
  termsAccepted: z.boolean().optional(),
});

export const zBookingExtras = z.object({
  extraItems: z.array(zExtraItem).optional(),
});

export const zBookingGifts = z.object({
  giftPayment: z.union([zGiftPayment, z.null()]).optional(),
});

export const zBookingIdentities = z.object({
  identity: zIdentity.optional(),
  identityId: z.string().uuid().optional(),
});

export const zBookingOffers = z.object({
  offerCode: z.union([z.string(), z.null()]).optional(),
  offerTitle: z.union([z.string(), z.null()]).optional(),
  offerComparisons: z.array(zOfferComparison).optional(),
  offerIsCombination: z.boolean().optional(),
  offers: z.array(zOffer).optional(),
  offer: z.union([zOffer, z.null()]).optional(),
});

export const zBookingPackages = z.object({
  isPackage: z.boolean().optional(),
  packageIncludeId: z.string().uuid().optional(),
  packageInclude: z.union([zInclude, z.null()]).optional(),
  packageBookings: z.array(zBooking).optional(),
});

export const zBookingPickups = z.object({
  pickupRequested: z.boolean().optional(),
  pickupId: z.union([z.string().uuid(), z.null()]).optional(),
  pickupHotel: z.union([z.string(), z.null()]).optional(),
  pickupRoom: z.union([z.string(), z.null()]).optional(),
  pickupNotes: z.union([z.string(), z.null()]).optional(),
  pickupPoint: z.union([zPickupPoint, z.null()]).optional(),
});

export const zBookingPricing = z.object({
  pricing: zPricing.optional(),
});

export const zBookingQuestions = z.object({
  questionAnswers: z.array(zQuestionAnswer).optional(),
});

export const zBookingReservationBody = z.object({
  resellerReference: z.string().optional(),
  productId: z.string().uuid(),
  optionId: z.string().uuid(),
  availabilityId: z.string().optional(),
  expirationMinutes: z.number().int().optional(),
  notes: z.string().optional(),
  emailReceipt: z.boolean().optional(),
  unitItems: z.array(zUnitItemIdentifier),
  contact: zBookingContact.optional(),
  currency: z.string().optional(),
  alias: z.string().optional(),
  settlementMethod: zSettlementMethod.optional(),
  quote: z.boolean().optional(),
  freesale: z.boolean().optional(),
  redeemed: z.boolean().optional(),
  uuid: z.string().uuid().optional(),
  tags: z.array(z.string()).optional(),
  orderId: z.string().uuid().optional(),
});

export const zOctoBookingReservationErrorResponse = z.object({
  body: z.union([
    zOctoErrorInvalidProductId,
    zOctoErrorInvalidOptionId,
    zOctoErrorInvalidUnitId,
    zOctoErrorInvalidAvailabilityId,
    zOctoErrorUnprocessableEntity,
    zOctoErrorUnauthorized,
    zOctoErrorInternalServerError,
    zOctoErrorForbidden,
  ]),
});

export const zBookingReservationErrorResponse =
  zOctoBookingReservationErrorResponse;

export const zBookingReservationRequest = z.object({
  body: zBookingReservationBody,
});

export const zBookingResources = z.object({
  resourceAllocations: z.array(zResourceAllocation).optional(),
});

export const zBookingUpdateBody = z.object({
  resellerReference: z.string().optional(),
  productId: z.string().uuid().optional(),
  optionId: z.string().uuid().optional(),
  availabilityId: z.string().optional(),
  expirationMinutes: z.number().int().optional(),
  notes: z.string().optional(),
  emailReceipt: z.boolean().optional(),
  unitItems: z.array(zUnitItemIdentifier).optional(),
  contact: zBookingContact.optional(),
  alias: z.string().optional(),
  settlementMethod: zSettlementMethod.optional(),
  quote: z.boolean().optional(),
  freesale: z.boolean().optional(),
  redeemed: z.boolean().optional(),
  uuid: z.string().uuid().optional(),
  tags: z.array(z.string()).optional(),
});

export const zBookingUpdateRequest = z.object({
  body: zBookingUpdateBody,
});

export const zCapability = z.enum([
  "octo/content",
  "octo/pricing",
  "octo/pickups",
  "octo/adjustments",
  "octo/offers",
  "octo/cart",
  "octo/cardPayments",
  "octo/checkin",
  "octo/webhooks",
  "octo/mappings",
  "octo/redemption",
  "octo/google",
  "octo/questions",
  "octo/resources",
  "octo/gifts",
  "octo/extras",
  "octo/packages",
  "octo/identities",
  "ventrata/content",
  "ventrata/getyourguide",
  "ventrata/partners",
]);

export const zWaitlistUnitItemIdentifier = z.object({
  id: z.string(),
  quantity: z.number().int().optional(),
});

export const zCreateWaitlistRequest = z.object({
  productId: z.string().uuid(),
  optionId: zDefaultableId,
  returnUrl: z.string().optional(),
  localDate: z.string(),
  contact: zBookingContact,
  units: z.array(zWaitlistUnitItemIdentifier),
});

export const zOctoExtendReservationBody = z.object({
  expirationMinutes: z.number().int().optional(),
});

export const zExtendReservationBody = zOctoExtendReservationBody;

export const zOctoExtendReservationErrorResponse = z.object({
  body: z.union([
    zOctoErrorInvalidBookingUuid,
    zOctoErrorUnprocessableEntity,
    zOctoErrorUnauthorized,
    zOctoErrorInternalServerError,
    zOctoErrorForbidden,
  ]),
});

export const zExtendReservationErrorResponse =
  zOctoExtendReservationErrorResponse;

export const zOctoExtendReservationRequest = z.object({
  uuid: z.string(),
  body: zOctoExtendReservationBody,
});

export const zExtendReservationRequest = zOctoExtendReservationRequest.and(
  z.object({
    body: zExtendReservationBody,
  }),
);

export const zOctoGetBookingRequest = z.object({
  uuid: z.string(),
});

export const zGetBookingRequest = zOctoGetBookingRequest;

export const zOctoGetBookingsRequest = z.object({
  resellerReference: z.string().optional(),
  supplierReference: z.string().optional(),
  localDate: z.string().optional(),
  localDateStart: z.string().optional(),
  localDateEnd: z.string().optional(),
  productId: z.string().optional(),
  optionId: z.string().optional(),
});

export const zGetBookingsRequest = zOctoGetBookingsRequest;

export const zOctoGetProductRequest = z.object({
  id: z.string(),
});

export const zGetProductRequest = zOctoGetProductRequest;

export const zOctoGetProductsRequest = z.record(z.unknown());

export const zGetProductsRequest = zOctoGetProductsRequest;

export const zOctoGetSupplierRequest = z.record(z.unknown());

export const zGetSupplierRequest = zOctoGetSupplierRequest;

export const zGetYourGuideActivateBody = z.object({
  gygLoginOTPSecret: z.string(),
  gygSupplierId: z.string(),
  gygSupplierName: z.string(),
});

export const zGetYourGuideActivateRequest = z.object({
  body: zGetYourGuideActivateBody,
});

export const zPartnersConnection = z.object({
  id: z.string().uuid(),
  name: z.string(),
  type: z.string(),
});

export const zGetYourGuideConnection = zPartnersConnection.and(
  z.object({
    gygConnectId: z.string(),
    gygLoginEmail: z.string(),
    gygLoginPassword: z.string(),
    gygLoginOTPSecret: z.string().optional(),
    gygSupplierId: z.string().optional(),
    gygSupplierName: z.string().optional(),
    gygActivated: z.boolean(),
  }),
);

export const zGift = z.object({
  agent: z.union([zAgent, z.null()]),
  alias: z.union([z.string(), z.null()]),
  amount: z.coerce.bigint(),
  cancellable: z.boolean(),
  cancellation: z.union([zBookingCancellation, z.null()]),
  confirmable: z.boolean(),
  contact: z.union([zCustomerContact, z.null()]),
  currency: z.string(),
  deliveryMethods: z.array(zDeliveryMethod),
  giftPayment: z.union([zGiftPayment, z.null()]),
  id: z.string().uuid(),
  message: z.union([z.string(), z.null()]),
  notes: z.union([z.string(), z.null()]),
  pricing: zPricing.optional(),
  recipient: z.union([zCustomerContact, z.null()]),
  requiredContactFields: z.array(zContactField),
  reseller: z.union([zReseller, z.null()]),
  resellerReference: z.union([z.string(), z.null()]),
  seller: z.union([zSeller, z.null()]),
  settlementMethod: zSettlementMethod,
  status: zBookingStatus,
  supplierReference: z.string(),
  testMode: z.union([z.boolean(), z.null()]),
  user: z.union([zUser, z.null()]),
  utcCreatedAt: z.string().datetime(),
  utcUpdatedAt: z.string().datetime(),
  utcExpiresAt: z.union([z.string().datetime(), z.null()]),
  utcRedeemedAt: z.union([z.string().datetime(), z.null()]),
  utcConfirmedAt: z.union([z.string().datetime(), z.null()]),
  uuid: z.string().uuid(),
  VisibleContactFields: z.array(zContactField),
  voucher: zTicket,
  identity: zIdentity.optional(),
  identityId: z.string().uuid().optional(),
});

export const zGiftIdentities = z.object({
  identity: zIdentity.optional(),
  identityId: z.string().uuid().optional(),
});

export const zListOrdersRequest = z.object({
  contactEmailAddress: z.string().optional(),
  contactLastName: z.string().optional(),
  contactPhoneNumber: z.string().optional(),
  supplierReference: z.string().optional(),
  utcCreatedAtEnd: z.string().optional(),
  utcCreatedAtStart: z.string().optional(),
  utcUpdatedAtEnd: z.string().optional(),
  utcUpdatedAtStart: z.string().optional(),
});

export const zResellerStatus = z.enum(["ACTIVE", "DISABLED", "DRAFT"]);

export const zMapping = z.object({
  id: z.string(),
  resellerReference: z.string(),
  resellerStatus: zResellerStatus,
  title: z.string(),
  url: z.string(),
  webhookUrl: z.union([z.string(), z.null()]),
  optionRequired: z.boolean(),
  unitRequired: z.boolean(),
  productId: z.union([z.string(), z.null()]),
  optionId: z.union([z.string(), z.null()]),
  unitId: z.union([z.string(), z.null()]),
  connected: z.boolean(),
});

export const zMediaRel = z.enum(["LOGO", "COVER", "GALLERY"]);

export const zMediaType = z.enum([
  "image/jpeg",
  "image/png",
  "video/mp4",
  "video/avi",
  "external/youtube",
  "external/vimeo",
]);

/**
 * Defines the opening hours for this availability, even for start time-based availability. Supports multiple periods for breaks in the day.
 */
export const zOctoOpeningHours = z.object({
  from: z.string(),
  to: z.string(),
});

export const zOctoPricingUnit = zOctoPricing.and(
  z.object({
    unitId: z.string(),
  }),
);

export const zOctoAvailabilityCalendar = z.object({
  localDate: z.string(),
  available: z.boolean(),
  status: zAvailabilityStatus,
  vacancies: z.union([z.number().int(), z.null()]),
  capacity: z.union([z.number().int(), z.null()]),
  openingHours: z.array(zOctoOpeningHours),
  unitPricingFrom: z.array(zOctoPricingUnit).optional(),
  pricingFrom: z.array(zOctoPricing).optional(),
});

export const zOctoMedia = z.object({
  src: z.string().url(),
  type: zMediaType,
  rel: zMediaRel,
  title: z.union([z.string(), z.null()]),
  caption: z.union([z.string(), z.null()]),
  copyright: z.union([z.string(), z.null()]),
});

export const zOctoRequestHeaders = z.record(z.unknown());

export const zOctoResponseHeaders = z.record(z.unknown());

export const zOfferCombination = z.object({
  productId: z.string(),
  optionId: z.string(),
  offerCode: z.string(),
  offerTitle: z.string(),
  pricing: zPricing,
  shortDescription: z.string().optional(),
  units: z.array(zUnit),
  booking: z.union([zBooking, z.null()]),
});

export const zOpeningHoursContent = z.object({
  frequency: z.string().optional(),
  frequencyAmount: z.number().int().optional(),
  frequencyUnit: z.string().optional(),
});

export const zOptionContent = z.object({
  title: z.string().optional(),
  subtitle: z.union([z.string(), z.null()]).optional(),
  language: z.string().optional(),
  shortDescription: z.union([z.string(), z.null()]).optional(),
  duration: z.string().optional(),
  durationAmount: z.number().optional(),
  durationUnit: zDurationUnit.optional(),
  coverImageUrl: z.union([z.string().url(), z.null()]).optional(),
  itinerary: z.union([z.array(zItineraryItem), z.null()]).optional(),
  fromPoint: z.union([zPoint, z.null()]).optional(),
  toPoint: z.union([zPoint, z.null()]).optional(),
});

export const zOptionExtras = z.object({
  extras: z.array(zExtra).optional(),
});

export const zOptionPackages = z.object({
  packageIncludes: z.array(zPackageInclude).optional(),
});

export const zOptionPickups = z.object({
  pickupAvailable: z.boolean().optional(),
  pickupRequired: z.boolean().optional(),
  pickupPoints: z.array(zPickupPoint).optional(),
});

export const zOptionQuestions = z.object({
  questions: z.array(zQuestion).optional(),
});

export const zOrder = z.object({
  id: z.string().uuid(),
  testMode: z.boolean(),
  settlementMethod: zSettlementMethod,
  supplierReference: z.string(),
  quote: z.boolean(),
  status: z.string(),
  utcExpiresAt: z.union([z.string(), z.null()]),
  utcConfirmedAt: z.union([z.string(), z.null()]),
  cancellable: z.boolean(),
  confirmable: z.boolean(),
  reseller: zReseller.optional(),
  agent: zAgent.optional(),
  contact: zCustomerContact.optional(),
  emailReceipt: z.boolean().optional(),
  bookings: z.array(zBooking),
  visibleContactFields: z.array(zContactField),
  requiredContactFields: z.array(zContactField),
  user: z.union([zUser, z.null()]),
  seller: z.union([zSeller, z.null()]),
  identity: zIdentity.optional(),
  identityId: z.string().uuid().optional(),
  offerCombinations: z.array(zOfferCombination).optional(),
  giftPayment: z.union([zGiftPayment, z.null()]).optional(),
});

export const zOrderGifts = z.object({
  giftPayment: z.union([zGiftPayment, z.null()]).optional(),
});

export const zOrderIdentities = z.object({
  identity: zIdentity.optional(),
  identityId: z.string().uuid().optional(),
});

export const zOrderOffers = z.object({
  offerCombinations: z.array(zOfferCombination).optional(),
});

export const zPartnerEnum = z.enum(["GetYourGuide"]);

export const zPartner = z.object({
  id: z.string().uuid(),
  name: zPartnerEnum,
});

export const zSupplierContact = z.object({
  website: z.union([z.string(), z.null()]),
  email: z.union([z.string().email(), z.null()]),
  telephone: z.union([z.string(), z.null()]),
  address: z.union([z.string(), z.null()]),
});

export const zSupplier = z.object({
  id: z.string().uuid(),
  name: z.string(),
  endpoint: z.string().url(),
  contact: zSupplierContact,
  shortDescription: z.union([z.string(), z.null()]).optional(),
  media: z.array(zOctoMedia).optional(),
  country: z.union([z.string(), z.null()]).optional(),
  destinations: z.array(zDestination).optional(),
});

export const zPartnersListConnection = z.object({
  supplier: zSupplier,
  connection: z.union([zPartnersConnection, zGetYourGuideConnection]),
  apiKey: z.string(),
});

export const zPartnersListConnectionsRequest = z.record(z.unknown());

export const zRequestHeaders = zOctoRequestHeaders;

export const zPartnersListConnectionsRequestHeaders = zRequestHeaders;

export const zPricingExtras = z.object({
  extraId: z.array(z.string()).optional(),
});

export const zPricingOffers = z.object({
  offerDiscount: z.union([zOfferDiscount, z.null()]).optional(),
});

export const zPricingUnitExtras = z.object({
  extraPricing: z.array(zPricing).optional(),
});

export const zProductContent = z.object({
  country: z.string().optional(),
  location: z.string().optional(),
  destination: zDestination.optional(),
  alert: z.string().optional(),
  title: z.string().optional(),
  subtitle: z.string().optional(),
  description: z.string().optional(),
  shortDescription: z.string().optional(),
  categories: z.array(zCategory).optional(),
  inclusions: z.array(z.string()).optional(),
  exclusions: z.array(z.string()).optional(),
  highlights: z.array(z.string()).optional(),
  pointToPoint: z.boolean().optional(),
  bookingTerms: z.string().optional(),
  privacyTerms: z.string().optional(),
  redemptionInstructions: z.string().optional(),
  cancellationPolicy: z.string().optional(),
  faqs: z.array(zFaq).optional(),
  coverImageUrl: z.string().url().optional(),
  bannerImageUrl: z.string().url().optional(),
  videoUrl: z.string().url().optional(),
  galleryImages: z.array(zImage).optional(),
  bannerImages: z.array(zImage).optional(),
  googlePlaceId: z.string().optional(),
  address: z.string().optional(),
  keywords: z.array(z.string()).optional(),
  tagline: z.string().optional(),
  brand: zBrand.optional(),
});

export const zProductGoogle = z.object({
  googleOptions: z.array(zGoogleOptions).optional(),
});

export const zProductPackages = z.object({
  isPackage: z.boolean().optional(),
  packageBookingAvailabilityRequired: z.boolean().optional(),
});

export const zProductPricing = z.object({
  defaultCurrency: z.string().optional(),
  availableCurrencies: z.array(z.string()).optional(),
  pricingPer: zPricingPer.optional(),
  includeTax: z.boolean().optional(),
});

export const zResponseHeaders = zOctoResponseHeaders;

export const zSupplierContent = z.object({
  country: z.union([z.string(), z.null()]).optional(),
  destinations: z.array(zDestination).optional(),
});

export const zUuid = z.string().uuid();

export const zUnitContent = z.object({
  title: z.string().optional(),
  titlePlural: z.string().optional(),
  subtitle: z.union([z.string(), z.null()]).optional(),
});

export const zUnitExtras = z.object({
  extras: z.array(zExtra).optional(),
});

export const zUnitItemPricing = z.object({
  pricing: zPricing.optional(),
});

export const zUnitItemQuestions = z.object({
  questionAnswers: z.array(zQuestionAnswer).optional(),
});

export const zUnitPricing = z.object({
  pricingFrom: z.array(zPricing).optional(),
  pricing: z.array(zPricing).optional(),
});

export const zUnitQuestions = z.object({
  questions: z.array(zQuestion).optional(),
});

export const zWaitlistUnitIdentifier = z.object({
  quantity: z.number().int(),
  unitId: z.string(),
});

export const zWaitlist = z.object({
  id: z.string().uuid(),
  productId: z.string().uuid(),
  optionId: zDefaultableId,
  localDate: z.string().date(),
  units: z.array(zWaitlistUnitIdentifier),
  contact: z.union([zCustomerContact, z.null()]),
});

export const zWebhookEvent = z.enum(["booking_update", "availability_update"]);

export const zWebhook = z.object({
  id: z.string(),
  event: zWebhookEvent,
  url: z.string().optional(),
  retryOnError: z.boolean(),
  useContactLanguage: z.boolean(),
  headers: z.record(z.string()),
  capabilities: z.array(zCapability),
});

export const zWhoIAm = z.object({
  supplier: zSupplier,
  connection: z.union([zGetYourGuideConnection, zPartnersConnection]),
  partner: zPartner,
  reseller: zReseller,
  checkout: z.unknown(),
  operator: z.unknown(),
  terminal: z.unknown(),
});

export const zWhoIAmRequest = z.record(z.unknown());

/**
 * The UUID of the booking
 */
export const zBookingConfirmationRequestUuid = z.string();

/**
 * A list of the Capabilities (their IDs) initialized with your request. ventrata/getyourguide capability is required
 */
export const zGetYourGuideActivateRequestHeadersOctoCapabilities = z.string();

/**
 * The UUID of the booking
 */
export const zOctoBookingCancellationRequestUuid = z.string();

/**
 * The UUID of the booking
 */
export const zOctoExtendReservationRequestUuid = z.string();

/**
 * The UUID of the booking
 */
export const zOctoGetBookingRequestUuid = z.string();

/**
 * All bookings made for a specific date
 */
export const zOctoGetBookingsRequestLocalDate = z.string();

/**
 * Last date of a date range search
 */
export const zOctoGetBookingsRequestLocalDateEnd = z.string();

/**
 * First date of a date range search
 */
export const zOctoGetBookingsRequestLocalDateStart = z.string();

/**
 * The option id to filter by
 */
export const zOctoGetBookingsRequestOptionId = z.string();

/**
 * The product id to filter by
 */
export const zOctoGetBookingsRequestProductId = z.string();

/**
 * The reseller reference on the booking
 */
export const zOctoGetBookingsRequestResellerReference = z.string();

/**
 * The reference provided by the supplier
 */
export const zOctoGetBookingsRequestSupplierReference = z.string();

/**
 * The product id
 */
export const zOctoGetProductRequestId = z.string();

/**
 * A list of the Capabilities (their IDs) initialized with your request.
 */
export const zOctoRequestHeadersOctoCapabilities = z.string();

/**
 * This optional request header allows to specify preferred languages for content in the response. A language code that specifies the language of the product content. This code must conform to the BCP 47 standard, following RFC 5646 and RFC 4647 specifications for language tags. Examples include en-US for American English, fr-FR for French (France), and es-ES for Spanish (Spain). This header supports a comma-separated list of language tags with optional quality values (q) to indicate priority, such as en-US, fr-CA;q=0.8, fr;q=0.7, which prioritizes U.S. English, followed by Canadian French, and general French. This header is defined in the HTTP/1.1 specification (RFC 7231) and is commonly used for internationalized websites and services to enhance user experience. For more details, visit MDN Web Docs: Accept-Language - HTTP | MDN. Note this only determines preference and does not guarantee location has content available in the desired language.
 */
export const zOctoRequestHeadersContent = z.string();

/**
 * ventrata/partners capability is required
 */
export const zPartnersListConnectionsRequestHeadersOctoCapabilities =
  z.string();

export const zPartnersListConnectionsRequestHeadersVentrataPartnerKey =
  z.string();

export const zAvailabilitiesAvailabilityCheckData = z.object({
  body: zAvailabilityCheckBody,
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zAvailabilitiesAvailabilityCheckResponse = z.union([
  z.array(zAvailability),
  zAvailabilityCheckErrorResponse,
]);

export const zAvailabilitiesAvailabilityCalendarData = z.object({
  body: zAvailabilityCalendarBody,
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zAvailabilitiesAvailabilityCalendarResponse = z.union([
  z.array(zOctoAvailabilityCalendar),
  zAvailabilityCalendarErrorResponse,
]);

export const zBookingsGetBookingsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      resellerReference: z.string().optional(),
      supplierReference: z.string().optional(),
      localDate: z.string().optional(),
      localDateStart: z.string().optional(),
      localDateEnd: z.string().optional(),
      productId: z.string().optional(),
      optionId: z.string().optional(),
    })
    .optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsGetBookingsResponse = z.array(zBooking);

export const zBookingsBookingUpdateData = z.object({
  body: zBookingUpdateBody,
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsBookingUpdateResponse = zBooking;

export const zBookingsBookingReservationData = z.object({
  body: zBookingReservationBody,
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsBookingReservationResponse = z.union([
  zBooking,
  zBookingReservationErrorResponse,
]);

export const zBookingsGetBookingData = z.object({
  body: z.never().optional(),
  path: z.object({
    uuid: z.string(),
  }),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsGetBookingResponse = zBooking;

export const zBookingsBookingCancellationData = z.object({
  body: zBookingCancellationBody,
  path: z.object({
    uuid: z.string(),
  }),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsBookingCancellationResponse = z.union([
  zBooking,
  zBookingCancellationErrorResponse,
]);

export const zBookingsBookingConfirmationData = z.object({
  body: zBookingConfirmationBody,
  path: z.object({
    uuid: z.string(),
  }),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsBookingConfirmationResponse = z.union([
  zBooking,
  zBookingConfirmationErrorResponse,
]);

export const zBookingsExtendReservationData = z.object({
  body: zExtendReservationBody,
  path: z.object({
    uuid: z.string(),
  }),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zBookingsExtendReservationResponse = z.union([
  zBooking,
  zExtendReservationErrorResponse,
]);

export const zProductsGetProductsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zProductsGetProductsResponse = z.array(zProduct);

export const zProductsGetProductData = z.object({
  body: z.never().optional(),
  path: z.object({
    id: z.string(),
  }),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zProductsGetProductResponse = zProduct;

export const zSuppliersGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zSuppliersGetResponse = zSupplier;

export const zGetYourGuidePostData = z.object({
  body: zGetYourGuideActivateBody,
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zGetYourGuidePostResponse = zGetYourGuideConnection;

export const zPartnersGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Ventrata-Partner-Key": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zPartnersGetResponse = z.array(zPartnersListConnection);

export const zWhoIAmSectionGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
  headers: z.object({
    "Octo-Capabilities": z.string(),
    "Accept-Language": z.string().optional(),
  }),
});

/**
 * The request has succeeded.
 */
export const zWhoIAmSectionGetResponse = zWhoIAm;
