/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Agent } from './Agent';
import type { Availability } from './Availability';
import type { BookingAdjustment } from './BookingAdjustment';
import type { BookingCancellation } from './BookingCancellation';
import type { BookingRejection } from './BookingRejection';
import type { BookingStatus } from './BookingStatus';
import type { ContactField } from './ContactField';
import type { CustomerContact } from './CustomerContact';
import type { DeliveryMethod } from './DeliveryMethod';
import type { DurationUnit } from './DurationUnit';
import type { ExtraItem } from './ExtraItem';
import type { GiftPayment } from './GiftPayment';
import type { Identity } from './Identity';
import type { Include } from './Include';
import type { Label } from './Label';
import type { Notice } from './Notice';
import type { Offer } from './Offer';
import type { OfferComparison } from './OfferComparison';
import type { Option } from './Option';
import type { PickupPoint } from './PickupPoint';
import type { Pricing } from './Pricing';
import type { Product } from './Product';
import type { QuestionAnswer } from './QuestionAnswer';
import type { Reseller } from './Reseller';
import type { ResourceAllocation } from './ResourceAllocation';
import type { Seller } from './Seller';
import type { SettlementMethod } from './SettlementMethod';
import type { Ticket } from './Ticket';
import type { UnitItem } from './UnitItem';
import type { User } from './User';
export type Booking = {
	/**
	 * A unique identifier generated by the supplier system for the booking. This ID ensures traceability and must be unique within the system.
	 */
	id: string;
	/**
	 * An optional idempotency key set when creating a booking to prevent duplicate bookings in case of retries. Used for API calls.
	 */
	uuid: string;
	/**
	 * Indicates whether the booking was created in test mode. If true, it is a test booking.
	 */
	testMode: boolean;
	/**
	 * A reference provided by the reseller to identify the booking.
	 */
	resellerReference: string | null;
	/**
	 * A reference provided by the reseller to identify the booking.
	 */
	supplierReference: string | null;
	/**
	 * Represents the current state of the booking:
	 * ON_HOLD: Awaiting confirmation.
	 * EXPIRED: Not confirmed within the hold expiration time.
	 * CONFIRMED: Successfully confirmed.
	 * CANCELLED: The booking was canceled.
	 * PENDING: Awaiting external confirmation.
	 * REDEEMED: The booking has been used.
	 */
	status: BookingStatus;
	/**
	 * An ISO8601 date time in UTC when the booking was created.
	 */
	utcCreatedAt: string;
	/**
	 * An ISO8601 date time in UTC when the booking was last updated, if applicable.
	 */
	utcUpdatedAt: string;
	/**
	 * An ISO8601 date times in UTC for when this booking is due to expire if the status is ON_HOLD.
	 */
	utcExpiresAt: string | null;
	/**
	 * An ISO8601 date time in UTC at when the booking was redeemed, if applicable.
	 */
	utcRedeemedAt: string | null;
	/**
	 * An ISO8601 date time in UTC when the booking was confirmed, if applicable.
	 */
	utcConfirmedAt: string | null;
	/**
	 * The ID of product booked.
	 */
	productId: string;
	/**
	 * The object of booked product.
	 */
	product?: Product;
	/**
	 * The ID of option booked.
	 */
	optionId: string;
	/**
	 * The ID of option booked.
	 */
	option?: Option;
	/**
	 * The object of booked option.
	 */
	cancellable: boolean;
	/**
	 * A boolean field indicating whether this booking can be cancelled.
	 */
	cancellation: BookingCancellation | null;
	/**
	 * Indicates if the booking was made without checking availability.
	 */
	freesale: boolean;
	/**
	 * The ID of availability booked.
	 */
	availabilityId: string | null;
	/**
	 * The availability object that was booked.
	 */
	availability?: Availability | null;
	/**
	 * Customer contact details for the booking (see unit object for per ticket / unit details).
	 */
	contact?: CustomerContact;
	/**
	 * Customer-facing public notes for the booking.
	 */
	notes: string | null;
	/**
	 * Specifies all supported methods of how tickets or vouchers for this booking are delivered.
	 * TICKET: Delivered individually per unit in the booking, where each person or unit receives a separate ticket. These will be provided in the ticket object.
	 * VOUCHER: Delivered as a single voucher for the entire booking, consolidating all units under one document. These will be provided in the voucher object.
	 * This field ensures clarity on the format of ticket or voucher delivery to resellers and customers.
	 */
	deliveryMethods: Array<DeliveryMethod>;
	/**
	 * Details for voucher-based delivery, provided when VOUCHER is one of deliveryMethods.
	 */
	voucher: Ticket | null;
	/**
	 * An array of unit items included in the booking.
	 */
	unitItems: Array<UnitItem>;
	/**
	 * Is on the object when Pricing capability is requested.
	 */
	pricing?: Pricing;
	/**
	 * A UUID you can set when generating the booking to use as an idempotency key.
	 */
	rebookingUuid: string | null;
	/**
	 * UUID of the original booking if this booking is a rebooking.
	 */
	originalRebookingUuid: string | null;
	/**
	 * An alias for the booking.
	 */
	alias: string | null;
	settlementMethod: SettlementMethod;
	/**
	 * If `TRUE`, booking was created as a quote.
	 */
	quote: boolean;
	/**
	 * Whether the booking can be confirmed.
	 */
	confirmable: boolean;
	agent: Agent | null;
	reseller: Reseller | null;
	/**
	 * An array of required contact fields.
	 */
	requiredContactFields: Array<ContactField>;
	/**
	 * An array of visible contact fields.
	 */
	visibleContactFields: Array<ContactField>;
	rejection: BookingRejection | null;
	utcNoshowedAt: string | null;
	/**
	 * An RFC 3339 date time in UTC when the booking was rebooked.
	 */
	utcRebookedAt: string | null;
	tags?: Array<string>;
	user: User | null;
	seller: Seller | null;
	localDateTimeStart: string;
	localDateTimeEnd: string;
	emailReceipt: boolean;
	label: Label | null;
	/**
	 * Whether the booking requires a pickup. This field is only present when octo/pickups capability is requested.
	 */
	pickupRequested?: boolean;
	/**
	 * The pickup ID that identifies the pickup in the booking system to make this reservation. This field is only present when octo/pickups capability is requested.
	 */
	pickupId?: string | null;
	/**
	 * A hotel name and address that will be included in the booking.
	 * This field is only present when octo/pickups capability is requested.
	 */
	pickupHotel?: string | null;
	/**
	 * A room number in the pickup hotel.
	 * This field is only present when octo/pickups capability is requested.
	 */
	pickupRoom?: string | null;
	/**
	 * Optional notes for the pickup. This field is only present when octo/pickups capability is requested.
	 */
	pickupNotes?: string | null;
	/**
	 * A pickup point that will be included in the booking. This field is only present when octo/pickups capability is requested.
	 */
	pickupPoint?: PickupPoint | null;
	duration?: string;
	durationAmount?: number;
	durationUnit?: DurationUnit;
	meetingLocalDateTime?: string | null;
	meetingPoint?: string | null;
	meetingPointCoordinates?: string | null;
	notices?: Array<Notice>;
	termsAccepted?: boolean;
	primary?: boolean;
	orderId?: string;
	orderReference?: string;
	/**
	 * Optional code used to apply a specific offer.
	 */
	offerCode?: string | null;
	/**
	 * Optional display title of the offer.
	 */
	offerTitle?: string | null;
	offerComparisons?: Array<OfferComparison>;
	offerIsCombination?: boolean;
	/**
	 * List of available offers for the availability.
	 */
	offers?: Array<Offer>;
	/**
	 * Best or selected offer for this availability.
	 */
	offer?: Offer | null;
	/**
	 * An array of questions and andswers that will be included in the booking.
	 * This field is only present when octo/questions capability is requested.
	 */
	questionAnswers?: Array<QuestionAnswer>;
	/**
	 * List of resource allocations associated with the booking.
	 */
	resourceAllocations?: Array<ResourceAllocation>;
	giftPayment?: GiftPayment | null;
	extraItems?: Array<ExtraItem>;
	/**
	 * Whether the booking is a package.
	 * This field is only present when octo/packages capability is requested.
	 */
	isPackage?: boolean;
	/**
	 * The package ID that identifies the package in the booking system to make this reservation.
	 * This field is only present when octo/packages capability is requested.
	 */
	packageIncludeId?: string;
	/**
	 * A package that will be included in the booking.
	 * This field is only present when octo/packages capability is requested.
	 */
	packageInclude?: Include | null;
	/**
	 * An array of bookings that will be included in the package.
	 * This field is only present when octo/packages capability is requested.
	 */
	packageBookings?: Array<Booking>;
	/**
	 * An array of adjustments that will be included in the booking. This field is only present when octo/adjustments capability is requested.
	 */
	adjustments?: Array<BookingAdjustment>;
	identity?: Identity;
	identityId?: string;
};
